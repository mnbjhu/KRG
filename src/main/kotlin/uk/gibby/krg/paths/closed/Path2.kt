package uk.gibby.krg.paths.closed

import uk.gibby.krg.returns.empty.EmptyReturn
import uk.gibby.krg.returns.graph.entities.Node
import uk.gibby.krg.returns.graph.entities.Relation
import kotlin.reflect.full.createType
import kotlin.reflect.full.superclasses


data class Path2<out A: Node<*>, out B: Relation<A, C, *>, out C: Node<*>>(val first: A, val firstToSecond: B, val second: C, internal val name: String): EmptyReturn()
data class Path3<out A: Node<*>, out B: Relation<A, C, *>, out C: Node<*>, out D: Relation<C, E, *>, out E: Node<*>>(val first: A, val firstToSecond: B, val second: C, val secondToThird: D, val third: E, internal val name: String): EmptyReturn()
data class Path4<out A: Node<*>, out B: Relation<A, C, *>, out C: Node<*>, out D: Relation<C, E, *>, out E: Node<*>, out F: Relation<E, G, *>, out G: Node<*>>(val first: A, val firstToSecond: B, val second: C, val secondToThird: D, val third: E, val thirdToFourth: F, val fourth: G, internal val name: String): EmptyReturn()
data class Path5<out A: Node<*>, out B: Relation<A, C, *>, out C: Node<*>, out D: Relation<C, E, *>, out E: Node<*>, out F: Relation<E, G, *>, out G: Node<*>, out H: Relation<G, I, *>, out I: Node<*>>(val first: A, val firstToSecond: B, val second: C, val secondToThird: D, val third: E, val thirdToFourth: F, val fourth: G, val fourthToFifth: H, val fifth: I, internal val name: String): EmptyReturn()
data class Path6<out A: Node<*>, out B: Relation<A, C, *>, out C: Node<*>, out D: Relation<C, E, *>, out E: Node<*>, out F: Relation<E, G, *>, out G: Node<*>, out H: Relation<G, I, *>, out I: Node<*>, out J: Relation<I, K, *>, out K: Node<*>>(val first: A, val firstToSecond: B, val second: C, val secondToThird: D, val third: E, val thirdToFourth: F, val fourth: G, val fourthToFifth: H, val fifth: I, val fifthToSixth: J, val sixth: K, internal val name: String): EmptyReturn()
data class Path7<out A: Node<*>, out B: Relation<A, C, *>, out C: Node<*>, out D: Relation<C, E, *>, out E: Node<*>, out F: Relation<E, G, *>, out G: Node<*>, out H: Relation<G, I, *>, out I: Node<*>, out J: Relation<I, K, *>, out K: Node<*>, out L: Relation<K, M, *>, out M: Node<*>>(val first: A, val firstToSecond: B, val second: C, val secondToThird: D, val third: E, val thirdToFourth: F, val fourth: G, val fourthToFifth: H, val fifth: I, val fifthToSixth: J, val sixth: K, val sixthToSeventh: L, val seventh: M, internal val name: String): EmptyReturn()
data class Path8<out A: Node<*>, out B: Relation<A, C, *>, out C: Node<*>, out D: Relation<C, E, *>, out E: Node<*>, out F: Relation<E, G, *>, out G: Node<*>, out H: Relation<G, I, *>, out I: Node<*>, out J: Relation<I, K, *>, out K: Node<*>, out L: Relation<K, M, *>, out M: Node<*>, out N: Relation<M, O, *>, out O: Node<*>>(val first: A, val firstToSecond: B, val second: C, val secondToThird: D, val third: E, val thirdToFourth: F, val fourth: G, val fourthToFifth: H, val fifth: I, val fifthToSixth: J, val sixth: K, val sixthToSeventh: L, val seventh: M, val seventhToEighth: N, val eighth: O, internal val name: String): EmptyReturn()
data class Path9<out A: Node<*>, out B: Relation<A, C, *>, out C: Node<*>, out D: Relation<C, E, *>, out E: Node<*>, out F: Relation<E, G, *>, out G: Node<*>, out H: Relation<G, I, *>, out I: Node<*>, out J: Relation<I, K, *>, out K: Node<*>, out L: Relation<K, M, *>, out M: Node<*>, out N: Relation<M, O, *>, out O: Node<*>, out P: Relation<O, Q, *>, out Q: Node<*>>(val first: A, val firstToSecond: B, val second: C, val secondToThird: D, val third: E, val thirdToFourth: F, val fourth: G, val fourthToFifth: H, val fifth: I, val fifthToSixth: J, val sixth: K, val sixthToSeventh: L, val seventh: M, val seventhToEighth: N, val eighth: O, val eighthToNinth: P, val ninth: Q, internal val name: String): EmptyReturn()
data class Path10<out A: Node<*>, out B: Relation<A, C, *>, out C: Node<*>, out D: Relation<C, E, *>, out E: Node<*>, out F: Relation<E, G, *>, out G: Node<*>, out H: Relation<G, I, *>, out I: Node<*>, out J: Relation<I, K, *>, out K: Node<*>, out L: Relation<K, M, *>, out M: Node<*>, out N: Relation<M, O, *>, out O: Node<*>, out P: Relation<O, Q, *>, out Q: Node<*>, out R: Relation<Q, S, *>, out S: Node<*>>(val first: A, val firstToSecond: B, val second: C, val secondToThird: D, val third: E, val thirdToFourth: F, val fourth: G, val fourthToFifth: H, val fifth: I, val fifthToSixth: J, val sixth: K, val sixthToSeventh: L, val seventh: M, val seventhToEighth: N, val eighth: O, val eighthToNinth: P, val ninth: Q, val ninthToTenth: R, val tenth: S, internal val name: String): EmptyReturn()